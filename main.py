from core.settings import bot_token

from core.utils.rag import chat_bot
from core.utils.matching import vacancy_resume_matching

from core.keyboards.menu import set_main_menu
from lexicon.lexicon_ru import help_text_ru, services_text_ru

from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message
from aiogram.filters import Command, CommandStart
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import ContentType, Document

import os
import csv
from datetime import datetime

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FOLDER = "data"
os.makedirs(DATA_FOLDER, exist_ok=True)
# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏—Å—Ç–æ—Ä–∏–∏
HISTORY_FILE = os.path.join(DATA_FOLDER, "history.csv")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
if not os.path.exists(HISTORY_FILE):
    with open(HISTORY_FILE, mode="w", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)
        writer.writerow(["user_id", "username", "datetime_utc", "vacancy_url", "resume_file", "response_file"])

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=bot_token, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É Menu
@dp.startup()
async def main():
    await set_main_menu(bot)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def start_command(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç üëã\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é —Å hh.ru –∏ –ø–æ—Å–ª–µ —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.\n–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å –∏–∑ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞.")
    # await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ...",
    #                      reply_markup=get_inline_keyboard())

# @dp.callback_query(F.data.in_(['resume_analysis', 'chat_with_bot']))
# async def process_buttons_press(callback: CallbackQuery):
#     await callback.answer()

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/help"
@dp.message(Command(commands='help'))
async def process_help_command(message: Message):
    await message.answer(
        text=help_text_ru)

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/consult"
@dp.message(Command(commands='consult'))
async def process_help_command(message: Message):
    await message.answer(
        text=services_text_ru, parse_mode='Markdown')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏
@dp.message(F.text.startswith("https://hh.ru"))
async def handle_hh_link(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    datetime_utc = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    user_data[user_id] = {"url": message.text.strip(), "username": username, "datetime_utc": datetime_utc}
    await message.reply("–°—Å—ã–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ üëç –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª —Å —Ä–µ–∑—é–º–µ. –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 2 –ú–±.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ PDF-—Ñ–∞–π–ª–∞
@dp.message(F.document)
async def handle_pdf(message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Å—ã–ª–∫—É —Ä–∞–Ω–µ–µ
    if user_id not in user_data or "url" not in user_data[user_id]:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é —Å hh.ru.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = user_data[user_id].get("username", "Unknown")  # –ò–∑–≤–ª–µ–∫–∞–µ–º username
    datetime_utc = user_data[user_id].get("datetime_utc")  # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –∏–º–µ–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .pdf
    file_name = message.document.file_name
    if not file_name.endswith(".pdf"):
        await message.reply("–û—à–∏–±–∫–∞: —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–¥–æ–ø—É—Å—Ç–∏–º–æ –Ω–µ –±–æ–ª–µ–µ 2 –ú–ë)
    file_size_limit = 2 * 1024 * 1024  # 2 –ú–ë –≤ –±–∞–π—Ç–∞—Ö
    if message.document.file_size > file_size_limit:
        await message.reply("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π üò≤ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ ‚Äî 2 –ú–±.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ
    file_info = await bot.get_file(message.document.file_id)
    resume_file_path = os.path.join(DATA_FOLDER, f"{user_id}_{datetime_utc}_{file_name}")
    await bot.download_file(file_info.file_path, resume_file_path)
    user_data[user_id]["resume"] = resume_file_path

    # –ü–µ—Ä–µ–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
    await message.reply("–†–µ–∑—é–º–µ –ø–æ–ª—É—á–µ–Ω–æ. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    try:
        url = user_data[user_id]["url"].split("?")[0]
        resume = user_data[user_id]["resume"]

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
        result = await vacancy_resume_matching(user_id, url, resume)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–∞–π–ª
        response_file_path = os.path.join(DATA_FOLDER, f"{user_id}_{datetime_utc}_response.txt")
        with open(response_file_path, mode="w", encoding="utf-8") as response_file:
            response_file.write(result)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CSV
        with open(HISTORY_FILE, mode="a", newline="", encoding="utf-8") as history_file:
            writer = csv.writer(history_file)
            writer.writerow([user_id, username, datetime_utc, url, resume_file_path, response_file_path])

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {result}")
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

# @dp.message(F.text)
# async def handle_chat_bot(message: Message):
#     query = message.text  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     answer = chat_bot(query)
#     await message.reply(answer)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: Message):
    user_id = message.from_user.id
    user_input = message.text

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
    ai_response = chat_bot(user_id, user_input)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.reply(ai_response)

if __name__ == '__main__':
    dp.run_polling(bot)
